#!/bin/bash
set -euo pipefail

if [[ "${BUILDKITE_PLUGIN_CREATE_RELEASE_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "--- :octopus-deploy: Enabling debug mode"
  set -x
  env | sort | grep BUILDKITE_PLUGIN_CREATE_RELEASE
fi

# Reads either a value or a list from plugin config into a global result array
# Returns success if values were read
function plugin_read_list_into_result() {
  local prefix="$1"
  local parameter="${prefix}_0"
  result=()

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      result+=("${!parameter}")
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n "${!prefix:-}" ]]; then
    result+=("${!prefix}")
  fi

  [[ ${#result[@]} -gt 0 ]] || return 1
}

cmd=( "create-release" )

#channel:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_CHANNEL:-}" ]]; then
    cmd+=( "--channel" "${BUILDKITE_PLUGIN_CREATE_RELEASE_CHANNEL}" )
fi

#config_file:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_CONFIG_FILE:-}" ]]; then
    cmd+=( "--configFile" "${BUILDKITE_PLUGIN_CREATE_RELEASE_CONFIG_FILE}")
fi

#debug:
if [[ "${BUILDKITE_PLUGIN_CREATE_RELEASE_DEBUG:-false}" =~ ^(true|on|1)$ ]]; then
    cmd+=( "--debug" )
fi

#default_package_version:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_DEFAULT_PACKAGE_VERSION:-}" ]]; then
    cmd+=( "--defaultPackageVersion" "${BUILDKITE_PLUGIN_CREATE_RELEASE_DEFAULT_PACKAGE_VERSION}" )
fi

#git_ref:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_GIT_REF:-}" ]]; then
    cmd+=( "--gitRef" "${BUILDKITE_PLUGIN_CREATE_RELEASE_GIT_REF}")
fi

#git_commit:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_GIT_COMMIT:-}" ]]; then
    cmd+=( "--gitCommit" "${BUILDKITE_PLUGIN_CREATE_RELEASE_GIT_COMMIT}")
fi

#ignore_channel_rules:
if [[ "${BUILDKITE_PLUGIN_CREATE_RELEASE_IGNORE_CHANNEL_RULES:-false}" =~ ^(true|on|1)$ ]]; then
    cmd+=( "--ignoreChannelRules" )
fi

#ignore_existing:
if [[ "${BUILDKITE_PLUGIN_CREATE_RELEASE_IGNORE_EXISTING:-false}" =~ ^(true|on|1)$ ]]; then
    cmd+=( "--ignoreExisting" )
fi

#ignore_ssl_errors:
if [[ "${BUILDKITE_PLUGIN_CREATE_RELEASE_IGNORE_SSL_ERRORS:-false}" =~ ^(true|on|1)$ ]]; then
    cmd+=( "--ignoreSslErrors" )
fi

#log_level:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_LOG_LEVEL:-}" ]]; then
    cmd+=( "--logLevel" "${BUILDKITE_PLUGIN_CREATE_RELEASE_LOG_LEVEL}")
fi

#package_prerelease:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_PACKAGE_PRERELEASE:-}" ]]; then
    cmd+=( "--packagePrerelease" "${BUILDKITE_PLUGIN_CREATE_RELEASE_PACKAGE_PRERELEASE}")
fi

#packages:
if plugin_read_list_into_result BUILDKITE_PLUGIN_CREATE_RELEASE_PACKAGES ; then
  for arg in "${result[@]}" ; do
    cmd+=( "--package" "${arg}" )
  done
fi

#packages_folder:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_PACKAGES_FOLDER:-}" ]]; then
    cmd+=( "--packagesFolder" "${BUILDKITE_PLUGIN_CREATE_RELEASE_PACKAGES_FOLDER}" )
fi

#project:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_PROJECT:-}" ]]; then
    cmd+=( "--project" "${BUILDKITE_PLUGIN_CREATE_RELEASE_PROJECT}" )
fi

#proxy:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_PROXY:-}" ]]; then
    cmd+=( "--proxy" "${BUILDKITE_PLUGIN_CREATE_RELEASE_PROXY}" )
fi

#proxy_username:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_PROXY_USERNAME:-}" ]]; then
    cmd+=( "--proxyUser" "${BUILDKITE_PLUGIN_CREATE_RELEASE_PROXY_USERNAME}" )
fi

#proxy_password:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_PROXY_PASSWORD:-}" ]]; then
    cmd+=( "--proxyPass" "${BUILDKITE_PLUGIN_CREATE_RELEASE_PROXY_PASSWORD}" )
fi

#release_notes:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_RELEASE_NOTES:-}" ]]; then
    cmd+=( "--releaseNotes" "${BUILDKITE_PLUGIN_CREATE_RELEASE_RELEASE_NOTES}" )
fi

#release_notes_file:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_RELEASE_NOTES_FILE:-}" ]]; then
    cmd+=( "--releaseNotesFile" "${BUILDKITE_PLUGIN_CREATE_RELEASE_RELEASE_NOTES_FILE}" )
fi

#release_number:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_RELEASE_NUMBER:-}" ]]; then
    cmd+=( "--releaseNumber" "${BUILDKITE_PLUGIN_CREATE_RELEASE_RELEASE_NUMBER}" )
fi

#space:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_SPACE:-}" ]]; then
    cmd+=( "--space" "${BUILDKITE_PLUGIN_CREATE_RELEASE_SPACE}" )
fi

#timeout:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_TIMEOUT:-}" ]]; then
    cmd+=( "--timeout" "${BUILDKITE_PLUGIN_CREATE_RELEASE_TIMEOUT}" )
fi

#what_if:
if [[ "${BUILDKITE_PLUGIN_CREATE_RELEASE_WHAT_IF:-false}" =~ ^(true|on|1)$ ]]; then
    cmd+=( "--whatIf" )
fi

args=()
maskedArgs=()
#server:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_SERVER:-}" ]]; then
    args+=( "--server" "${BUILDKITE_PLUGIN_CREATE_RELEASE_SERVER}" )
    maskedArgs+=( "--server" "${BUILDKITE_PLUGIN_CREATE_RELEASE_SERVER}" )
fi

#api_key:
if [[ -n "${BUILDKITE_PLUGIN_CREATE_RELEASE_API_KEY:-}" ]]; then
    args+=( "--apiKey" "$(eval "echo \$${BUILDKITE_PLUGIN_CREATE_RELEASE_API_KEY}")" )
    maskedArgs+=( "--apiKey" "SECRET" )
fi

echo "+++ :octopus-deploy: Running create-release"
# shellcheck disable=SC2145
echo "Running command: ${cmd[@]} ${maskedArgs[@]}"

# shellcheck disable=SC2145 # cmd and args needs to be quoted correctly, and this code is correct
octo "${cmd[@]}" "${args[@]}"